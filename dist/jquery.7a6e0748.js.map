{"version":3,"sources":["jquery.js"],"names":["window","jQuery","selectorOrArray","elements","document","querySelectorAll","Array","oldApi","find","selector","array","i","length","elements2","from","concat","end","each","fn","call","parent","node","indexOf","parentNode","push","children","print","console","log","addClass","className","classList","add"],"mappings":";;;;;;;;;;;;AAAAA,MAAM,CAACC,MAAP,GAAc,UAASC,eAAT,EAAyB;AACnC,MAAIC,QAAJ;;AACA,MAAG,OAAOD,eAAP,KAAyB,QAA5B,EAAqC;AACjCC,IAAAA,QAAQ,GAACC,QAAQ,CAACC,gBAAT,CAA0BH,eAA1B,CAAT;AACH,GAFD,MAEM,IAAGA,eAAe,YAAYI,KAA9B,EAAoC;AACtCH,IAAAA,QAAQ,GAACD,eAAT;AACH;;AAED,SAAO;AACHK,IAAAA,MAAM,EAACL,eAAe,CAACK,MADpB;AAEHC,IAAAA,IAFG,gBAEEC,QAFF,EAEW;AACV,UAAIC,KAAK,GAAC,EAAV;;AACA,WAAI,IAAIC,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACR,QAAQ,CAACS,MAAvB,EAA8BD,CAAC,EAA/B,EAAkC;AAC/B,YAAME,SAAS,GAACP,KAAK,CAACQ,IAAN,CAAWX,QAAQ,CAACQ,CAAD,CAAR,CAAYN,gBAAZ,CAA6BI,QAA7B,CAAX,CAAhB,CAD+B,CACsC;;AACrEC,QAAAA,KAAK,GAACA,KAAK,CAACK,MAAN,CAAaF,SAAb,CAAN;AACF;;AACDH,MAAAA,KAAK,CAACH,MAAN,GAAa,IAAb,CANU,CAMU;;AACpB,aAAON,MAAM,CAACS,KAAD,CAAb,CAPU,CAOc;AAE5B,KAXG;AAYJM,IAAAA,GAZI,iBAYC;AACJ,aAAO,KAAKT,MAAZ;AACA,KAdG;AAeJU,IAAAA,IAfI,gBAeCC,EAfD,EAeI;AACP,WAAI,IAAIP,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACR,QAAQ,CAACS,MAAvB,EAA8BD,CAAC,EAA/B,EAAkC;AAC9BO,QAAAA,EAAE,CAACC,IAAH,CAAQ,IAAR,EAAahB,QAAQ,CAACQ,CAAD,CAArB,EAAyBA,CAAzB,EAD8B,CACE;AACnC;;AACD,aAAO,IAAP,CAJO,CAIQ;AACf,KApBG;AAqBJS,IAAAA,MArBI,oBAqBI;AACJ,UAAMV,KAAK,GAAC,EAAZ;AACA,WAAKO,IAAL,CAAU,UAACI,IAAD,EAAQ;AACd,YAAGX,KAAK,CAACY,OAAN,CAAcD,IAAI,CAACE,UAAnB,MAAiC,CAAC,CAArC,EAAuC;AAClCb,UAAAA,KAAK,CAACc,IAAN,CAAWH,IAAI,CAACE,UAAhB;AACH;AAEL,OALD;AAMA,aAAOtB,MAAM,CAACS,KAAD,CAAb,CARI,CAQqB;AAC5B,KA9BG;AA+BJe,IAAAA,QA/BI,sBA+BM;AACN,UAAMf,KAAK,GAAC,EAAZ;AACA,WAAKO,IAAL,CAAU,UAACI,IAAD,EAAQ;AACdX,QAAAA,KAAK,CAACc,IAAN,OAAAd,KAAK,qBAASW,IAAI,CAACI,QAAd,EAAL;AACH,OAFD;AAGA,aAAOxB,MAAM,CAACS,KAAD,CAAb;AACH,KArCG;AAsCJgB,IAAAA,KAtCI,mBAsCG;AACHC,MAAAA,OAAO,CAACC,GAAR,CAAYzB,QAAZ,EADG,CACqB;AAC3B,KAxCG;AAyCH0B,IAAAA,QAzCG,oBAyCMC,SAzCN,EAyCgB;AACf,WAAI,IAAInB,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACR,QAAQ,CAACS,MAAvB,EAA8BD,CAAC,EAA/B,EAAkC;AAC9BR,QAAAA,QAAQ,CAACQ,CAAD,CAAR,CAAYoB,SAAZ,CAAsBC,GAAtB,CAA0BF,SAA1B;AACH;;AACD,aAAO,IAAP,CAJe,CAIA;AACA;AACA;AAElB;AAjDE,GAAP,CARmC,CA4DnC;AACH,CA7DD","file":"jquery.7a6e0748.js","sourceRoot":"..\\src","sourcesContent":["window.jQuery=function(selectorOrArray){\r\n    let elements;\r\n    if(typeof selectorOrArray==='string'){\r\n        elements=document.querySelectorAll(selectorOrArray);\r\n    }else if(selectorOrArray instanceof Array){\r\n        elements=selectorOrArray\r\n    }\r\n\r\n    return {\r\n        oldApi:selectorOrArray.oldApi, \r\n        find(selector){\r\n            let array=[];\r\n            for(let i=0;i<elements.length;i++){\r\n               const elements2=Array.from(elements[i].querySelectorAll(selector))   //elements[i].querySelectorAll(selector)得到伪数组\r\n               array=array.concat(elements2)\r\n            }\r\n            array.oldApi=this   //this指的就是之前定义的那个api\r\n            return jQuery(array)    //查找某些元素的子元素，并且找到后创建新的jquery返回，因为找到元素就是为了操作元素嘛；\r\n                    \r\n       },\r\n       end(){\r\n        return this.oldApi\r\n       },\r\n       each(fn){\r\n        for(let i=0;i<elements.length;i++){\r\n            fn.call(null,elements[i],i);    //fn是一个函数，这个函数是在调用的时候定义的，但是得知道他的功能是什么；以便将参数传给他；\r\n        }\r\n        return this    //this就是调用者，也就是api；\r\n       },\r\n       parent(){\r\n           const array=[];\r\n           this.each((node)=>{\r\n               if(array.indexOf(node.parentNode)===-1){\r\n                    array.push(node.parentNode)\r\n                }\r\n               \r\n           })\r\n           return jQuery(array);    //直接返回array并没有是什么操作性，于是这里封装为jquery对象\r\n       },\r\n       children(){\r\n           const array=[]\r\n           this.each((node)=>{\r\n               array.push(...node.children)\r\n           })\r\n           return jQuery(array)   \r\n       },\r\n       print(){\r\n           console.log(elements)   //x.print.call(x)  这个elements是新的jquery对象的elements；\r\n       },\r\n        addClass(className){\r\n            for(let i=0;i<elements.length;i++){\r\n                elements[i].classList.add(className);\r\n            }\r\n            return this;   //链式写法的原理;在构建完之前就调用自己;\r\n                           //调用的时候是api.addClass()==>api.addClass.call(api),api\r\n                           //就相当于this;\r\n                        \r\n        }\r\n        \r\n    }\r\n    // return api       //将api返回到jQuery()上；return整个对象，少写api这个变量更简洁；\r\n}"]}