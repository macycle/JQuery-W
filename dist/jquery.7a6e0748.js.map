{"version":3,"sources":["jquery.js"],"names":["window","jQuery","selectorOrArrayOrTemplate","elements","createElement","document","querySelectorAll","Array","string","container","innerHTML","trim","content","firstChild","jquery","oldApi","find","selector","array","i","length","elements2","from","concat","get","index","appendTo","node","Element","each","el","appendChild","append","children","HTMLCollection","end","fn","call","parent","indexOf","parentNode","push","print","console","log","addClass","className","classList","add","$"],"mappings":"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","file":"jquery.7a6e0748.js","sourceRoot":"..\\src","sourcesContent":["window.jQuery=function(selectorOrArrayOrTemplate){\r\n    let elements;   //全局变量\r\n    if(typeof selectorOrArrayOrTemplate==='string'){\r\n        if(selectorOrArrayOrTemplate[0]==='<'){\r\n            //创建div\r\n            elements=[createElement(selectorOrArrayOrTemplate)]\r\n        }else{\r\n            elements=document.querySelectorAll(selectorOrArrayOrTemplate);\r\n        }\r\n        \r\n    }else if(selectorOrArrayOrTemplate instanceof Array){\r\n        elements=selectorOrArrayOrTemplate;\r\n    }\r\n    \r\n\r\n    function createElement(string){    //创建容器;\r\n        const container=document.createElement('template');\r\n        container.innerHTML=string.trim();\r\n        return container.content.firstChild;\r\n    }\r\n    return {\r\n        jquery:true,\r\n        elements:elements,\r\n        oldApi:selectorOrArrayOrTemplate.oldApi, \r\n        find(selector){\r\n            let array=[];\r\n            for(let i=0;i<elements.length;i++){\r\n               const elements2=Array.from(elements[i].querySelectorAll(selector))   //elements[i].querySelectorAll(selector)得到伪数组\r\n               array=array.concat(elements2)\r\n            }\r\n            array.oldApi=this   //this指的就是之前定义的那个api\r\n            return jQuery(array)    //查找某些元素的子元素，并且找到后创建新的jquery返回，因为找到元素就是为了操作元素嘛；\r\n                    \r\n       },\r\n        get(index){     //查找元素的下标\r\n            return elements[index]\r\n        },\r\n        appendTo(node){\r\n            if(node instanceof Element){\r\n                this.each(el=>node.appendChild(el))   //遍历 elements，对每个 el 进行 node.appendChild 操作\r\n            }else if(node.jquery===true){\r\n                this.each(el=>node.get(0).appendChild(el))   //遍历 elements，对每个 el 进行 node.get(0).appendChild(el))  操作\r\n            }\r\n        },\r\n        append(children){\r\n            if(children instanceof Element){\r\n                this.get(0).appendChild(children)\r\n            }else if(children instanceof HTMLCollection){\r\n                for(let i=0;i<children.length;i++){\r\n                    this.get(0).appendChild(children[i])\r\n                }\r\n            }else if(children.jquery===true){\r\n                children.each(node=>this.get(0).appendChild(node))\r\n            }\r\n        },\r\n       end(){\r\n        return this.oldApi\r\n       },\r\n       each(fn){\r\n        for(let i=0;i<elements.length;i++){\r\n            fn.call(null,elements[i],i);    //fn是一个函数，这个函数是在调用的时候定义的，但是得知道他的功能是什么；以便将参数传给他；\r\n        }\r\n        return this    //this就是调用者，也就是api；\r\n       },\r\n       parent(){\r\n           const array=[];\r\n           this.each((node)=>{\r\n               if(array.indexOf(node.parentNode)===-1){\r\n                    array.push(node.parentNode)\r\n                }\r\n               \r\n           })\r\n           return jQuery(array);    //直接返回array并没有是什么操作性，于是这里封装为jquery对象\r\n       },\r\n       children(){\r\n           const array=[]\r\n           this.each((node)=>{\r\n               array.push(...node.children)\r\n           })\r\n           return jQuery(array)   \r\n       },\r\n       print(){\r\n           console.log(elements)   //x.print.call(x)  这个elements是新的jquery对象的elements；\r\n       },\r\n        addClass(className){\r\n            for(let i=0;i<elements.length;i++){\r\n                elements[i].classList.add(className);\r\n            }\r\n            return this;   //链式写法的原理;在构建完之前就调用自己;\r\n                            //调用的时候是api.addClass()==>api.addClass.call(api),api\r\n                            //就相当于this;\r\n                        \r\n        }\r\n        \r\n    }\r\n    // return api       //将api返回到jQuery()上；return整个对象，少写api这个变量更简洁；\r\n}\r\n\r\n\r\nwindow.$=window.jQuery;"]}